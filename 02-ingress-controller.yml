# -- Create a specific service account for the ingress controller
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: kube-system
  name: ingress
---

# -- Create the permissions the ingress needs control over
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ingress
rules:
  - apiGroups: [""]
    resources: ["endpoints","nodes","pods","secrets"]
    verbs: ["list","watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["update","list","watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get","list","watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get","list","watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create","patch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses/status"]
    verbs: ["update"]
---

# -- Bind the permissions onto the service account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ingress
roleRef:
  kind: ClusterRole
  name: ingress
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: ingress
  namespace: kube-system
---

# -- Create a role to bind onto the service account
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ingress
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["configmaps","pods","secrets","namespaces"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    # Defaults to "<election-id>-<ingress-class>"
    # Here: "<ingress-controller-leader>-<nginx>"
    # This has to be adapted if you change either parameter
    # when launching the nginx-ingress-controller.
    resourceNames: ["ingress-controller-leader-nginx"]
    verbs: ["get","update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
---

# -- Bind the role to the ingress service account
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ingress
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress
subjects:
  - kind: ServiceAccount
    name: ingress
    namespace: kube-system
---

# -- Create a daemon set, so the default backend (handling unhandled endpoints) runs on each node
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  namespace: kube-system
  name: ingress-default-backend
spec:
  template:
    metadata:
      labels:
        app: ingress-default-backend
    spec:
      serviceAccountName: ingress
      terminationGracePeriodSeconds: 0
      containers:
      - name: ingress-default-backend
        image: gcr.io/google_containers/defaultbackend:1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

# -- Expose the default ingress backend as a service so it can be used by the ingress-nginx-controller
apiVersion: v1
kind: Service
metadata:
  namespace: kube-system
  name: ingress-default-backend
spec:
  type: NodePort
  selector:
    app: ingress-default-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---

# -- Create a daemon set for web requests and send them to the nginx-ingress-controller
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  namespace: kube-system
  name: ingress-controller
spec:
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        app: ingress-controller
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: ingress
      hostNetwork: true
      terminationGracePeriodSeconds: 0
      containers:
        - name: ingress-controller
          args:
            - /nginx-ingress-controller
            - '--default-backend-service=$(POD_NAMESPACE)/ingress-default-backend'
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 5

          ports:
            - name: http
              containerPort: 80
              hostPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              hostPort: 443
              protocol: TCP
            - name: ssh
              containerPort: 10022
              hostPort: 10022
              protocol: TCP
---